
Engine classes and methods
**************************


Plug methods list
=================

   *Plug.connect(other)*
   *Plug.disconnect(other)*
   *Plug.generate_name()*
   *Plug.set(value)*


Circuit methods list
====================

   *Circuit.class_name()*
   *Circuit.evalfun()*
   *Circuit.generate_name()*
   *Circuit.nb_inputs()*
   *Circuit.nb_outputs()*
   *Circuit.remove(component)*
   *Circuit.setName(name)*


Plug methods descriptions
=========================


Plug.connect(other)
-------------------

Plug.connect(other)

   Connects two plugs, or logs a warning message if the connection
   isn't valid.

   Parameters:
      **other** (*Plug*) -- the second plug of the connection

   Returns:
      True if the connection has been established, False otherwise

   Return type:
      bool

   exemple:

      plugA.connect(plugB)
      => True if plugA has been connected to plugB


Plug.disconnect(other)
----------------------

Plug.disconnect(other)

   Disconnects two plugs, or logs a warning message if the
   disconnection isn't valid.

   Parameters:
      **other** (*Plug*) -- the second plug of the disconnection

   Returns:
      True if the has been successfully disconnected, False otherwise

   Return type:
      bool

   exemple:

      plugA.disconnect(plugB)
      => True if plugB has been disconnected from plugA


Plug.generate_name()
--------------------

Plug.generate_name()

   Generate a name for the object. This method is called in the Plug
   constructor if no name was given to it. The generated name begin
   with 'in' or 'out' whether the Plug is an input or an output and
   ends with a number so that there cannot be two identical Plug names
   belonging to the same parent Circuit.

   Returns:
      The generated name

   Return type:
      str

   exemple:

      plugA.generate_name()
      => out3


Plug.set(value)
---------------

Plug.set(value)

   Sets the boolean value of a Plug. True or 1 means that the power
   applied to the Plug is high. False or 0 means that the power is
   Low.

   Parameters:
      **value** (*bool*) -- The plug electric power value

   exemple:

      plugA.set(1)


Plug.setName(name)
------------------

Plug.setName(name)

   Sets the object's name. The name cannot be empty or used by another
   Plug of the parent Circuit.

   Parameters:
      **name** (*str*) -- The object's name

   Returns:
      True if the object's name has been successfully set, False
      otherwise

   Return type:
      bool

   exemple:

      plugA.setName('myInputPlug')


Circuit methods descriptions
============================


Circuit.class_name()
--------------------

Circuit.class_name()

   Retrieve the class name of the object. It is usefull to get the
   name of a Circuit subclass (gates).

   Returns:
      The object class name

   Return type:
      str

   exemple:

      circuitA.class_name()
      => AndGate


Circuit.evalfun()
-----------------

Circuit.evalfun()

   The evalfun method contains a function which must compute and set
   the object's output(s) value(s) based on the object input(s)
   value(s).

   Returns:
      The object class name

   Return type:
      str

   Note: Only Circuit subclass (gates) have an evalfun method. For
     instance, the NotGate Circuit subclass have an evalfun method
     which sets its output to be the logic negation of its input.


Circuit.generate_name()
-----------------------

Circuit.generate_name()

   Generate a name for the Circuit. This method is called in the
   Circuit constructor if no name was given to it. The generated name
   begin with the object class name and ends with a number so that
   there cannot be two identical Circuit names belonging to the same
   parent Circuit.

   Returns:
      The generated name

   Return type:
      str

   exemple:

      circuitA.generate_name()
      => XorGate2


Circuit.nb_inputs()
-------------------

Circuit.nb_inputs()

   Get the inputs number of the Circuit.

   Returns:
      The inputs number

   Return type:
      int

   exemple:

      circuitA.nb_inputs()
      => 6


Circuit.nb_outputs()
--------------------

Circuit.nb_outputs()

   Get the outputs number of the Circuit.

   Returns:
      The outputs number

   Return type:
      int

   exemple:

      circuitA.nb_outputs()
      => 2


Circuit.remove(component)
-------------------------

Circuit.remove(component)

   Remove a component from the object. The component can be a Plug or
   a Circuit. If it is a Plug the method will operate Plugs
   disconnections before removing the Plug so that it is fully removd
   from anywhere.

   Parameters:
      **component** (*Plug or Circuit*) -- The component to remove
      from the object

   Returns:
      True if the component has been successfully removed from the
      object

   Return type:
      bool

   exemple:

      circuitA.remove(plugA)


Circuit.setName(name)
---------------------

Circuit.setName(name)

   Sets the object's name. The name cannot be empty or used by another
   Plug of the parent Circuit.

   Parameters:
      **name** (*str*) -- The object's name

   Returns:
      True if the object's name has been successfully set, False
      otherwise

   Return type:
      bool

   exemple:

      circuitA.setName('AND_1')
